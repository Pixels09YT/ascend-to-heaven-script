--- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

--- Player and GUI setup
local player = Players.LocalPlayer
local PlayerGui = player:WaitForChild("PlayerGui")

local gui = Instance.new("ScreenGui")
gui.Name = "AscendControlGUI"
gui.Parent = PlayerGui -- Parent directly to PlayerGui
gui.DisplayOrder = 10
gui.ResetOnSpawn = false -- Ensure GUI persists across respawns

-- Helper function to create TextButtons
local function createButton(parent, name, text, size, position, bgColor, textColor)
    local btn = Instance.new("TextButton")
    btn.Name = name
    btn.Text = text
    btn.Size = size
    btn.Position = position
    btn.BackgroundColor3 = bgColor
    btn.TextColor3 = textColor
    btn.Font = Enum.Font.SourceSansBold
    btn.TextScaled = true
    btn.Parent = parent
    return btn
end

-- Toggle Button
local toggleButton = createButton(
    gui,
    "ToggleButton",
    "Toggle Ascend UI",
    UDim2.new(0.1, 0, 0.05, 0),
    UDim2.new(0.05, 0, 0.05, 0),
    Color3.fromRGB(85, 85, 85),
    Color3.fromRGB(255, 255, 255)
)

-- Main Ascend/UnAscend Frame
local frame = Instance.new("Frame")
frame.Name = "AscendFrame"
frame.Size = UDim2.new(0.2, 0, 0.25, 0) -- Increased height for textbox
frame.Position = UDim2.new(0.5, 0, 0.8, 0) -- Fixed position (e.g., bottom-center)
frame.AnchorPoint = Vector2.new(0.5, 0.5)
frame.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
frame.BorderSizePixel = 0
frame.Visible = true
frame.Parent = gui -- Parent to gui

-- Ascend Speed Text Box (Label + Input)
local speedLabel = Instance.new("TextLabel", frame)
speedLabel.Name = "SpeedLabel"
speedLabel.Text = "Ascend Speed:"
speedLabel.Size = UDim2.new(0.9, 0, 0.2, 0)
speedLabel.Position = UDim2.new(0.05, 0, 0.05, 0)
speedLabel.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
speedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
speedLabel.Font = Enum.Font.SourceSansBold
speedLabel.TextScaled = true
speedLabel.TextXAlignment = Enum.TextXAlignment.Left

local speedTextBox = Instance.new("TextBox", frame)
speedTextBox.Name = "SpeedTextBox"
speedTextBox.Size = UDim2.new(0.9, 0, 0.2, 0)
speedTextBox.Position = UDim2.new(0.05, 0, 0.25, 0) -- Below the label
speedTextBox.PlaceholderText = "Enter speed (e.g., 30)"
speedTextBox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
speedTextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
speedTextBox.TextScaled = true
speedTextBox.Font = Enum.Font.SourceSans
speedTextBox.ClearTextOnFocus = true
speedTextBox.KeyboardMode = Enum.KeyboardMode.Numeric

-- Ascend/UnAscend Buttons
local ascendButton = createButton(
    frame,
    "AscendButton",
    "Ascend",
    UDim2.new(0.4, 0, 0.3, 0),
    UDim2.new(0.1, 0, 0.5, 0),
    Color3.fromRGB(70, 130, 180),
    Color3.fromRGB(255, 255, 255)
)

local unAscendButton = createButton(
    frame,
    "UnAscendButton",
    "UnAscend",
    UDim2.new(0.4, 0, 0.3, 0),
    UDim2.new(0.5, 0, 0.5, 0),
    Color3.fromRGB(200, 80, 80),
    Color3.fromRGB(255, 255, 255)
)

--- Ascent/Descent variables
local isAscending = false
local ascendSpeed = 30 -- Default speed
local originalHumanoidCFrame = nil -- To store initial CFrame for resetting on descend

-- Set initial text box value
speedTextBox.Text = tostring(ascendSpeed)

--- Event for speed text box
speedTextBox.FocusLost:Connect(function(enterPressed)
    local newSpeed = tonumber(speedTextBox.Text)
    if newSpeed and newSpeed > 0 then
        ascendSpeed = newSpeed
        print("Ascend speed set to: " .. ascendSpeed)
    else
        warn("Invalid speed entered. Must be a positive number. Resetting to default.")
        speedTextBox.Text = tostring(ascendSpeed)
    end
end)

--- Function to reset character state
local function resetCharacterState()
    isAscending = false
    local character = player.Character
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")
    local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

    if humanoid then
        humanoid.PlatformStand = false -- Re-enable default animations
    end
    if humanoidRootPart then
        humanoidRootPart.AssemblyLinearVelocity = Vector3.new(humanoidRootPart.AssemblyLinearVelocity.X, 0, humanoidRootPart.AssemblyLinearVelocity.Z)
        if originalHumanoidCFrame then
            humanoidRootPart.CFrame = originalHumanoidCFrame -- Reset orientation
            originalHumanoidCFrame = nil
        end
    end
end

--- Toggle functionality
toggleButton.MouseButton1Click:Connect(function()
    frame.Visible = not frame.Visible
    toggleButton.Text = frame.Visible and "Hide Ascend UI" or "Show Ascend UI"
    if not frame.Visible then
        resetCharacterState() -- Reset when UI is hidden
    end
end)

--- Ascend/UnAscend functionality
ascendButton.MouseButton1Click:Connect(function()
    isAscending = true
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")
    local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

    if humanoid and humanoidRootPart then
        originalHumanoidCFrame = humanoidRootPart.CFrame -- Store current CFrame before modifying
        humanoid.PlatformStand = true -- Disable default animations
    end
end)

unAscendButton.MouseButton1Click:Connect(function()
    resetCharacterState() -- Reset when "UnAscend" is clicked
end)

-- Continuously update player's velocity and orientation if ascending
RunService.Stepped:Connect(function()
    if isAscending then
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character and character:FindFirstChildOfClass("Humanoid")
        local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

        if humanoid and humanoidRootPart and humanoid.PlatformStand then
            -- Set vertical velocity, maintaining horizontal velocity
            humanoidRootPart.AssemblyLinearVelocity = Vector3.new(
                humanoidRootPart.AssemblyLinearVelocity.X,
                ascendSpeed,
                humanoidRootPart.AssemblyLinearVelocity.Z
            )

            -- Make character face up: Rotate around its current horizontal right vector to tilt them backwards.
            -- This preserves their current yaw (left/right facing).
            local currentPos = humanoidRootPart.Position
            -- Get only the Y (yaw) rotation from the current CFrame
            local _, currentYaw, _ = humanoidRootPart.CFrame:ToOrientation()
            local currentYawCFrame = CFrame.new(currentPos) * CFrame.Angles(0, currentYaw, 0)

            humanoidRootPart.CFrame = currentYawCFrame * CFrame.Angles(math.rad(-90), 0, 0)
        end
    end
end)
